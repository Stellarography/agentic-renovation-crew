{"version":3,"file":"main.js","sources":["../../electron/main.ts"],"sourcesContent":["\nimport { app, BrowserWindow, ipcMain, dialog } from 'electron'\nimport { join } from 'path'\nimport { readFileSync, writeFileSync } from 'fs'\n\n// Types for IPC communication\ninterface AgentMessage {\n  id: string\n  role: 'user' | 'agent' | 'system'\n  content: string\n  timestamp: number\n  agentId?: string\n}\n\ninterface StreamChunk {\n  id: string\n  content: string\n  done: boolean\n}\n\ninterface AgentConfig {\n  id: string\n  name: string\n  type: string\n  description: string\n  enabled: boolean\n  config: Record<string, any>\n}\n\nclass MainProcess {\n  private mainWindow: BrowserWindow | null = null\n  private isDev = process.env.NODE_ENV === 'development'\n\n  constructor() {\n    this.setupApp()\n    this.setupIpcHandlers()\n  }\n\n  private setupApp(): void {\n    const gotTheLock = app.requestSingleInstanceLock()\n\n    if (!gotTheLock) {\n      app.quit()\n    } else {\n      app.on('second-instance', (event, commandLine, workingDirectory) => {\n        // Someone tried to run a second instance, we should focus our window.\n        if (this.mainWindow) {\n          if (this.mainWindow.isMinimized()) this.mainWindow.restore()\n          this.mainWindow.focus()\n        }\n      })\n\n      app.whenReady().then(() => {\n        this.createWindow()\n      })\n\n      app.on('window-all-closed', () => {\n        if (process.platform !== 'darwin') {\n          app.quit()\n        }\n      })\n\n      app.on('activate', () => {\n        if (BrowserWindow.getAllWindows().length === 0) {\n          this.createWindow()\n        }\n      })\n    }\n  }\n\n  private createWindow(): void {\n    this.mainWindow = new BrowserWindow({\n      width: 1400,\n      height: 900,\n      minWidth: 800,\n      minHeight: 600,\n      webPreferences: {\n        nodeIntegration: false,\n        contextIsolation: true,\n        preload: join(__dirname, 'preload.js'),\n        webSecurity: false\n      },\n      titleBarStyle: 'default',\n      show: false\n    })\n\n    if (this.isDev) {\n      this.mainWindow.loadURL('http://localhost:5173')\n      this.mainWindow.webContents.openDevTools()\n    } else {\n      this.mainWindow.loadFile(join(__dirname, '../renderer/index.html'))\n    }\n\n    this.mainWindow.once('ready-to-show', () => {\n      this.mainWindow?.show()\n    })\n  }\n\n  private setupIpcHandlers(): void {\n    // Agent conversation streaming\n    ipcMain.handle('agent:send-message', async (event, message: AgentMessage) => {\n      return this.handleAgentMessage(message)\n    })\n\n    // Agent management\n    ipcMain.handle('agent:get-configs', async () => {\n      return this.getAgentConfigs()\n    })\n\n    ipcMain.handle('agent:update-config', async (event, config: AgentConfig) => {\n      return this.updateAgentConfig(config)\n    })\n\n    // File operations for document management\n    ipcMain.handle('file:open-dialog', async () => {\n      if (!this.mainWindow) return null\n      \n      const result = await dialog.showOpenDialog(this.mainWindow, {\n        properties: ['openFile', 'multiSelections'],\n        filters: [\n          { name: 'Documents', extensions: ['md', 'txt', 'json', 'pdf'] },\n          { name: 'All Files', extensions: ['*'] }\n        ]\n      })\n\n      return result.canceled ? null : result.filePaths\n    })\n\n    ipcMain.handle('file:save-dialog', async () => {\n      if (!this.mainWindow) return null\n\n      const result = await dialog.showSaveDialog(this.mainWindow, {\n        filters: [\n          { name: 'Markdown', extensions: ['md'] },\n          { name: 'JSON', extensions: ['json'] },\n          { name: 'Text', extensions: ['txt'] }\n        ]\n      })\n\n      return result.canceled ? null : result.filePath\n    })\n\n    ipcMain.handle('file:read', async (event, filePath: string) => {\n      try {\n        const content = readFileSync(filePath, 'utf-8')\n        return { success: true, content }\n      } catch (error) {\n        return { success: false, error: (error as Error).message }\n      }\n    })\n\n    ipcMain.handle('file:write', async (event, filePath: string, content: string) => {\n      try {\n        writeFileSync(filePath, content, 'utf-8')\n        return { success: true }\n      } catch (error) {\n        return { success: false, error: (error as Error).message }\n      }\n    })\n\n    // System info\n    ipcMain.handle('system:get-info', async () => {\n      return {\n        platform: process.platform,\n        version: app.getVersion(),\n        electronVersion: process.versions.electron\n      }\n    })\n  }\n\n  private async handleAgentMessage(message: AgentMessage): Promise<AsyncIterable<StreamChunk>> {\n    // Mock streaming response - replace with actual AI integration\n    const responses = [\n      \"I understand your request. Let me analyze this step by step...\",\n      \"Based on my analysis, here are my recommendations:\",\n      \"1. First, let's consider the architectural patterns\",\n      \"2. We should implement proper error handling\",\n      \"3. Documentation and testing will be crucial\",\n      \"I'm ready to assist you with the implementation. What would you like to focus on first?\"\n    ]\n\n    return this.createMockStream(message.id, responses.join('\\n\\n'))\n  }\n\n  private async* createMockStream(messageId: string, content: string): AsyncIterable<StreamChunk> {\n    const words = content.split(' ')\n    let currentContent = ''\n\n    for (let i = 0; i < words.length; i++) {\n      currentContent += (i > 0 ? ' ' : '') + words[i]\n      \n      yield {\n        id: messageId,\n        content: currentContent,\n        done: false\n      }\n\n      // Simulate streaming delay\n      await new Promise(resolve => setTimeout(resolve, 50 + Math.random() * 100))\n    }\n\n    yield {\n      id: messageId,\n      content: currentContent,\n      done: true\n    }\n  }\n\n  private getAgentConfigs(): AgentConfig[] {\n    // Mock agent configurations - replace with actual storage\n    return [\n      {\n        id: 'code-gen',\n        name: 'Code Generation Agent',\n        type: 'code-generation',\n        description: 'Specialized in generating, reviewing, and optimizing code',\n        enabled: true,\n        config: {\n          language: 'typescript',\n          framework: 'react',\n          testingFramework: 'jest'\n        }\n      },\n      {\n        id: 'doc-agent',\n        name: 'Documentation Agent',\n        type: 'documentation',\n        description: 'Creates and maintains technical documentation',\n        enabled: true,\n        config: {\n          format: 'markdown',\n          includeExamples: true,\n          apiDocs: true\n        }\n      },\n      {\n        id: 'discovery',\n        name: 'Discovery Agent',\n        type: 'discovery',\n        description: 'Analyzes codebases and discovers patterns and issues',\n        enabled: false,\n        config: {\n          scanDepth: 'full',\n          includeTests: true,\n          reportFormat: 'json'\n        }\n      }\n    ]\n  }\n\n  private updateAgentConfig(config: AgentConfig): boolean {\n    // Mock update - replace with actual persistence\n    console.log('Updating agent config:', config)\n    return true\n  }\n}\n\n// Initialize main process\nnew MainProcess()\n"],"names":["app","BrowserWindow","join","ipcMain","dialog","readFileSync","writeFileSync"],"mappings":"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"}